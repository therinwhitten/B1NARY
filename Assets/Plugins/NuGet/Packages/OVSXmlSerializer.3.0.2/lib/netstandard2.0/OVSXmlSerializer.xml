<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OVSXmlSerializer</name>
    </assembly>
    <members>
        <member name="T:OVSSerializer.OVSXmlAttributeAttribute">
            <summary>
            Writes an attribute to the containing class or struct instead of making
            its own element. Only primitive types can apply, and field must be not 
            an object to apply.
            <para>
            If <see cref="T:OVSSerializer.OVSXmlNamedAsAttribute"/> is on the same field, it will be 
            overrided by <see cref="P:OVSSerializer.OVSXmlAttributeAttribute.CustomName"/>
            </para>
            </summary>
            <remarks>
            In the code, these are parsed first instead of the elements later listed
            in the object.
            </remarks>
        </member>
        <member name="M:OVSSerializer.OVSXmlAttributeAttribute.op_Explicit(System.Xml.Serialization.XmlAttributeAttribute)~OVSSerializer.OVSXmlAttributeAttribute">
            <summary>
            Converts The normal xml attribute into the OVSXml Attribute;
            </summary>
            <param name="castie"> The victim to cast into with extreme amounts of bytes. </param>
        </member>
        <member name="M:OVSSerializer.OVSXmlAttributeAttribute.IsAttribute(OVSSerializer.Internals.StructuredObject,OVSSerializer.OVSXmlAttributeAttribute@)">
            <summary>
            Checks if the object is an attribute attribute, or the xml attribute's
            attribute attribute.
            </summary>
            <param name="object">The object to check.</param>
            <param name="attribute">Gets the attributed attributes attribute for the object that wants to be an attribute for the xml elements that can hold attributes.</param>
        </member>
        <member name="M:OVSSerializer.OVSXmlAttributeAttribute.IsAttribute(System.Reflection.FieldInfo,OVSSerializer.OVSXmlAttributeAttribute@)">
            <summary>
            Ensures that the field or type has the <see cref="T:OVSSerializer.OVSXmlAttributeAttribute"/>,
            The regular <see cref="T:System.Xml.Serialization.XmlAttributeAttribute"/>
            is applied as well.
            </summary>
            <param name="field"> The field to check. </param>
            <param name="contents"> 
            If <see langword="true"/>, then it will return the attribute contents.
            </param>
        </member>
        <member name="M:OVSSerializer.OVSXmlAttributeAttribute.IsAttribute(System.Type,OVSSerializer.OVSXmlAttributeAttribute@)">
            <summary>
            Checks if the type has an attribute attribute, or the xml attribute's
            attribute attribute.
            </summary>
            <param name="currentType">The object to check.</param>
            <param name="output">Gets the attributed attributes attribute for the object that wants to be an attribute for the xml elements that can hold attributes.</param>
        </member>
        <member name="P:OVSSerializer.OVSXmlAttributeAttribute.CustomName">
            <summary>
            The name to override the attribute name with. Note that it will override
            the value from <see cref="P:OVSSerializer.OVSXmlNamedAsAttribute.Name"/>.
            </summary>
        </member>
        <member name="M:OVSSerializer.OVSXmlAttributeAttribute.#ctor">
            <summary>
            Creates a new <see cref="T:OVSSerializer.OVSXmlAttributeAttribute"/> that utilizes the
            attribute's field name to assign to.
            </summary>
        </member>
        <member name="M:OVSSerializer.OVSXmlAttributeAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:OVSSerializer.OVSXmlAttributeAttribute"/> with a customized
            name that will override <see cref="T:OVSSerializer.OVSXmlNamedAsAttribute"/>'s name.
            </summary>
            <param name="customName"> A custom name for the attribute. </param>
        </member>
        <member name="T:OVSSerializer.OVSXmlIgnoreAttribute">
            <summary>
            When being serialized by <see cref="T:OVSSerializer.OVSXmlSerializer"/>, it will write the
            name listed here instead of the field name.
            </summary>
        </member>
        <member name="M:OVSSerializer.OVSXmlIgnoreAttribute.Ignore(OVSSerializer.Internals.StructuredObject)">
            <summary>
            Checks if the object has the ignore attribute, or the normal system
            xml equivalent.
            </summary>
        </member>
        <member name="M:OVSSerializer.OVSXmlIgnoreAttribute.Ignore(System.Reflection.FieldInfo)">
            <summary>
            Checks if the field has the ignore attribute, the object itself, 
            along with the normal xml system equivalent.
            </summary>
        </member>
        <member name="M:OVSSerializer.OVSXmlIgnoreAttribute.#ctor">
            <summary>
            Constructs a new ignore attribute used to completely not assign the
            values in the XML file.
            </summary>
        </member>
        <member name="T:OVSSerializer.OVSXmlIgnoreConfigsAttribute">
            <summary>
            An attribute that specifically causes an object or field to ignore
            an end-user's custom serializers. Useful for considering interfaces.
            </summary>
        </member>
        <member name="T:OVSSerializer.OVSXmlNamedAsAttribute">
            <summary>
            When being serialized by <see cref="T:OVSSerializer.OVSXmlSerializer"/>, it will write the
            name listed here instead of the field name. 
            
            </summary>
        </member>
        <member name="M:OVSSerializer.OVSXmlNamedAsAttribute.HasName(OVSSerializer.Internals.StructuredObject,System.String@)">
            <summary>
            Checks if the object has the overrided name. If <see langword="true"/>,
            then returns said custom name.
            </summary>
        </member>
        <member name="M:OVSSerializer.OVSXmlNamedAsAttribute.HasName(System.Reflection.FieldInfo,System.String@)">
            <summary>
            Checks if the field has the overrided name. If <see langword="true"/>,
            then returns said custom name.
            </summary>
        </member>
        <member name="P:OVSSerializer.OVSXmlNamedAsAttribute.Name">
            <summary>
            Renames the specified element with this name. Make sure to not have
            any spaces in the name.
            </summary>
        </member>
        <member name="M:OVSSerializer.OVSXmlNamedAsAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:OVSSerializer.OVSXmlNamedAsAttribute"/> for naming elements
            and attributes.
            </summary>
            <param name="name"> The name to rename the object in the XML file. </param>
        </member>
        <member name="T:OVSSerializer.OVSXmlTextAttribute">
            <summary>
            Writes the value as a primitive type, with some additional elements left over.
            </summary>
        </member>
        <member name="M:OVSSerializer.OVSXmlTextAttribute.IsText(OVSSerializer.Internals.StructuredObject)">
            <summary>
            Checks if an object is the text field, instead of having elements.
            </summary>
        </member>
        <member name="M:OVSSerializer.OVSXmlTextAttribute.IsText(System.Reflection.FieldInfo)">
            <summary>
            Checks if an field is the text field, instead of having elements.
            </summary>
        </member>
        <member name="M:OVSSerializer.OVSXmlTextAttribute.#ctor">
            <summary>
            Creates a new instance of <see cref="T:OVSSerializer.OVSXmlTextAttribute"/>
            </summary>
        </member>
        <member name="T:OVSSerializer.ICustomSerializer">
            <summary>
            A customizable serializer, does custom checks of its own to determine and 
            serialize.
            </summary>
        </member>
        <member name="M:OVSSerializer.ICustomSerializer.CheckAndWrite(OVSSerializer.Internals.OVSXmlWriter,System.Xml.XmlNode,OVSSerializer.Internals.StructuredObject,System.String,System.Xml.XmlNode@)">
            <summary>
            Checks if it can first parse the item, then attempts to write it into
            the document given the parameters.
            </summary>
            <param name="writer">The source writer. Mostly used to continue parsing as normal for things like enumerables.</param>
            <param name="parentNode">The parent of the current node.</param>
            <param name="object">The object to serialize. May sometimes be a <see cref="T:OVSSerializer.Internals.FieldObject"/>.</param>
            <param name="suggestedName">The name to write as the element or attribute.</param>
            <param name="output">The given XmlNode. Note that you still need to write to the <paramref name="parentNode"/>, this is for niche internals.</param>
            <returns>If it can actually parse the item.</returns>
        </member>
        <member name="M:OVSSerializer.ICustomSerializer.CheckAndRead(OVSSerializer.Internals.OVSXmlReader,System.Type,System.Xml.XmlNode,System.Object@)">
            <summary>
            Checks if it can first parse the item, then attempts to read it
            given the parameters.
            </summary>
            <remarks>
            Note when you create a reference type, please add them in the writer dictionary.
            </remarks>
            <param name="reader">The source reader. Mostly used to continue parsing as normal for things like enumerables.</param>
            <param name="type">The suspected type of the object.</param>
            <param name="node">The node where which it came from.</param>
            <param name="output">The read node.</param>
            <returns>If it can actually parse the item.</returns>
        </member>
        <member name="T:OVSSerializer.InterfaceSerializer">
            <summary>
            A custom-made list that handles parsing various interfaces and objects
            together, latest added parsers first.
            </summary>
        </member>
        <member name="M:OVSSerializer.InterfaceSerializer.GetDefault">
            <summary>
            Creates a new default version with the recommended serializers in order:
            <list type="number">
            <item><see cref="T:OVSSerializer.Internals.ListInterfaceSerializer"/></item>
            <item><see cref="T:OVSSerializer.Internals.ArraySerializer"/></item>
            <item><see cref="T:OVSSerializer.Internals.DictionarySerializer"/></item>
            <item><see cref="T:OVSSerializer.Internals.DatetimeSerializer"/></item>
            <item><see cref="T:OVSSerializer.Internals.TimeSpanSerializer"/></item>
            </list>
            </summary>
        </member>
        <member name="M:OVSSerializer.InterfaceSerializer.#ctor">
            <summary>
            Initializes a new empty instance of a list of serializers.
            </summary>
        </member>
        <member name="M:OVSSerializer.InterfaceSerializer.Add(OVSSerializer.ICustomSerializer)">
            <summary>
            Adds a new custom serializer to parse in a custom way.
            </summary>
        </member>
        <member name="T:OVSSerializer.IOVSConfig">
            <summary>
            An interface to act as a configuration tool to modify and take info from.
            </summary>
        </member>
        <member name="P:OVSSerializer.IOVSConfig.CurrentCulture">
            <summary>
            Gets or sets the culture, which will handle primitive printing. Set
            as <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> for cross-compatibility
            between computers, but can be set to other cultures if needed.
            </summary>
        </member>
        <member name="P:OVSSerializer.IOVSConfig.UseSingleInstanceInsteadOfMultiple">
            <summary>
            Whenever a reference type is made, and multiple things use the same
            instance of the reference type, then it will simply use an ID system
            to refer to said instance. Disabling this removes this feature. Disabled
            by default.
            </summary>
        </member>
        <member name="P:OVSSerializer.IOVSConfig.Version">
            <summary>
            The current version of the XML file. Null if you don't want any
            attributes assigned to the root element
            </summary>
        </member>
        <member name="P:OVSSerializer.IOVSConfig.IgnoreUndefinedValues">
            <summary>
            If the object is set to <see langword="null"/> on the reader, or missing entirely,
            it will instead allow the default to be set instead on enabled. Where
            leaving it disabled to set it to <see langword="null"/> instead.
            </summary>
        </member>
        <member name="P:OVSSerializer.IOVSConfig.CustomSerializers">
            <summary>
            A list that overrides the traditional field system, sometimes for
            readability. Uses <see cref="M:OVSSerializer.InterfaceSerializer.GetDefault"/> as default.
            </summary>
        </member>
        <member name="P:OVSSerializer.IOVSConfig.OmitAutoGenerationComment">
            <summary>
            Disables the use of the comment about being auto-generated by
            OVSXmlSerializer. Enabled by default.
            </summary>
        </member>
        <member name="P:OVSSerializer.IOVSConfig.VersionLeniency">
            <summary>
            When reading a file, it will check the version. This setting will determine
            the leniancy that it has to allow parsing it.
            </summary>
        </member>
        <member name="P:OVSSerializer.IOVSConfig.NewLineOnAttributes">
            <summary>
            Whenever it should add a new line when declaring attributes.
            </summary>
        </member>
        <member name="P:OVSSerializer.IOVSConfig.OmitXmlDelcaration">
            <summary>
            Gets or sets a value indicating whether to omit an XML declaration.
            The declaration mentions the beginning element, that typically mentions
            the encoding type and the version of the XML.
            </summary>
            <returns>
            <see langword="true"/> to omit the XML declaration; otherwise, <see langword="false"/>. 
            Default is <see langword="true"/>, as it is autogenerated and most likely
            be handled by the <see cref="T:OVSSerializer.OVSXmlSerializer`1"/> again.
            </returns>
        </member>
        <member name="P:OVSSerializer.IOVSConfig.IndentChars">
            <summary>
            The single indentation that should occur. This will be repeated as 
            layers are added further.
            </summary>
        </member>
        <member name="P:OVSSerializer.IOVSConfig.Indent">
            <summary>
            When writing onto a file, if it should have indentation such as '\n'.
            </summary>
        </member>
        <member name="P:OVSSerializer.IOVSConfig.StandaloneDeclaration">
            <summary>
            When writing the XML Declaration, there is a value that tells if the
            XML document is standalone, which is 'no' or <see langword="false"/>
            by most documents. In order to be <see langword="true"/>, or 'yes', 
            it has to pass the following conditions:
            <list type="bullet">
            <item>No default attribute values are specified for elements</item>
            <item>No entity references used in the instance document are defined</item>
            <item>No attribute values need to be normalized</item>
            <item>No elements contain ignorable white space.</item>
            </list>
            There is more information about this here: http://www.cafeconleche.org/books/effectivexml/chapters/01.html,
            but feel free to leave this as <see langword="null"/>, as this is the
            default setting for <see cref="T:System.Xml.XmlDocument"/> or <see cref="T:System.Xml.XmlWriter"/>
            and serialization.
            </summary>
        </member>
        <member name="P:OVSSerializer.IOVSConfig.TypeHandling">
            <summary>
            how the XML file from <see cref="T:System.Xml.Serialization.XmlSerializer"/> should handle types. 
            </summary>
        </member>
        <member name="P:OVSSerializer.IOVSConfig.HandleReadonlyFields">
            <summary>
            How the writer should handle readonly field. <see cref="F:OVSSerializer.ReadonlyFieldHandle.Continue"/>
            as default. This can be manipulated when concerning coding in restricted 
            environment.when it throws a <see cref="T:System.Security.VerificationException"/>
            </summary>
        </member>
        <member name="P:OVSSerializer.IOVSConfig.Encoding">
            <summary>
            The encoding of the result of the file.
            </summary>
        </member>
        <member name="P:OVSSerializer.IOVSConfig.WriterSettings">
            <summary>
            Converts all data from the config to the relevant writer settings.
            </summary>
        </member>
        <member name="T:OVSSerializer.Internals.LinkedListSerializer">
            <summary>
            Serializer that serializes linked lists.
            </summary>
        </member>
        <member name="M:OVSSerializer.Internals.LinkedListSerializer.CheckAndWrite(OVSSerializer.Internals.OVSXmlWriter,System.Xml.XmlNode,OVSSerializer.Internals.StructuredObject,System.String,System.Xml.XmlNode@)">
            <inheritdoc/>
        </member>
        <member name="M:OVSSerializer.Internals.LinkedListSerializer.CheckAndRead(OVSSerializer.Internals.OVSXmlReader,System.Type,System.Xml.XmlNode,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="T:OVSSerializer.Internals.ListInterfaceSerializer">
            <summary>
            Serializes <see cref="T:System.Collections.IList"/>, can take generic types if it is <see cref="T:System.Collections.Generic.List`1"/>
            </summary>
        </member>
        <member name="M:OVSSerializer.Internals.ListInterfaceSerializer.CheckAndWrite(OVSSerializer.Internals.OVSXmlWriter,System.Xml.XmlNode,OVSSerializer.Internals.StructuredObject,System.String,System.Xml.XmlNode@)">
            <inheritdoc/>
        </member>
        <member name="M:OVSSerializer.Internals.ListInterfaceSerializer.CheckAndRead(OVSSerializer.Internals.OVSXmlReader,System.Type,System.Xml.XmlNode,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="T:OVSSerializer.Internals.DictionarySerializer">
            <summary>
            Serializes <see cref="T:System.Collections.IDictionary"/>, can take generic types if it is <see cref="T:System.Collections.Generic.Dictionary`2"/>
            </summary>
        </member>
        <member name="T:OVSSerializer.Internals.ArraySerializer">
            <summary>
            Serializes arrays.
            </summary>
        </member>
        <member name="T:OVSSerializer.Internals.DatetimeSerializer">
            <summary>
            Serializes <see cref="T:System.DateTime"/> with its own parsing system.
            </summary>
        </member>
        <member name="T:OVSSerializer.Internals.TimeSpanSerializer">
            <summary>
            Serializes <see cref="T:System.TimeSpan"/> with its own parsing system.
            </summary>
        </member>
        <member name="P:OVSSerializer.Internals.FieldObject.Parent">
            <summary>
            The parent of the <see cref="P:OVSSerializer.Internals.StructuredObject.Value"/>. <see langword="null"/> if 
            </summary>
        </member>
        <member name="P:OVSSerializer.Internals.FieldObject.Field">
            <summary>
            
            </summary>
        </member>
        <member name="P:OVSSerializer.Internals.FieldObject.ParentType">
            <summary>
            The <see cref="P:OVSSerializer.Internals.FieldObject.Parent"/>'s type.
            </summary>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="P:OVSSerializer.Internals.FieldObject.IsAutoImplementedProperty">
            <summary>
            If the object is an auto-implemented property. Determined by if the
            field name contains the requirements.
            </summary>
        </member>
        <member name="P:OVSSerializer.Internals.FieldObject.IsDerivedFromBase">
            <summary>
            If the object from a field, then it will determine if it has a derived
            class from the field. If it does, then <see langword="true"/>. Otherwise,
            <see langword="false"/>.
            </summary>
        </member>
        <member name="T:OVSSerializer.Internals.StructuredObject">
            <summary>
            Metadata of the current object, along with the object itself.
            </summary>
        </member>
        <member name="M:OVSSerializer.Internals.StructuredObject.EnsureName(System.String,OVSSerializer.Internals.StructuredObject)">
            <summary>
            Ensures the name is not an auto-property, and removes some jargon to
            make it XML safe, along with changing it as well depending on some 
            attributes.
            </summary>
        </member>
        <member name="M:OVSSerializer.Internals.StructuredObject.IsProbablyAutoImplementedProperty(System.String)">
            <summary>
            Because auto-implemented properties are serialized a bit differently,
            this attempts to check if it is a property.
            </summary>
            <param name="name">The name of the assumed property.</param>
            <returns>if it is actually a property.</returns>
        </member>
        <member name="M:OVSSerializer.Internals.StructuredObject.RemoveAutoPropertyTags(System.String)">
            <summary>
            Removes the tags that makes it an auto-property so it can be properly
            serialized.
            </summary>
            <param name="name">The name of the auto-property.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:OVSSerializer.Internals.StructuredObject.TryRemoveAutoImplementedPropertyTags(System.String@)">
            <summary>
            Checks if it is an auto-property. If it is, then it will filter it.
            </summary>
            <param name="input">The assumed property name.</param>
            <returns>The potentially filtered name.</returns>
        </member>
        <member name="P:OVSSerializer.Internals.StructuredObject.Value">
            <summary>
            The actual object it is trying to serialize.
            </summary>
        </member>
        <member name="P:OVSSerializer.Internals.StructuredObject.ValueType">
            <summary>
            The type of the object.
            </summary>
        </member>
        <member name="P:OVSSerializer.Internals.StructuredObject.OriginatedType">
            <summary>
            The original or base type. Only really matters for root objects 
            or fields.
            </summary>
        </member>
        <member name="P:OVSSerializer.Internals.StructuredObject.IsDerivedFromBase">
            <summary>
            If the object is deriving from the base.
            </summary>
        </member>
        <member name="P:OVSSerializer.Internals.StructuredObject.IsNull">
            <summary>
            If the object is null.
            </summary>
        </member>
        <member name="P:OVSSerializer.Internals.StructuredObject.IsPrimitive">
            <summary>
            If the object is primitive or a string.
            </summary>
        </member>
        <member name="M:OVSSerializer.Internals.StructuredObject.#ctor(System.Object)">
            <summary>
            Initializes the metadata for the object, storing info of the object
            itself.
            </summary>
        </member>
        <member name="M:OVSSerializer.Internals.StructuredObject.#ctor(System.Object,System.Type)">
            <summary>
            Initializes the metadata for the object, storing info of the object
            itself, along with measuring the target type.
            </summary>
            <param name="value">The object to keep track of.</param>
            <param name="targetType">The originating type.</param>
        </member>
        <member name="M:OVSSerializer.Internals.StructuredObject.HasAttribute``1">
            <summary>
            If the field or object contains the attribute.
            </summary>
            <typeparam name="T"> The attribute. </typeparam>
        </member>
        <member name="M:OVSSerializer.Internals.StructuredObject.HasAttribute``1(``0@)">
            <summary>
            If the field or object contains the attribute.
            </summary>
            <typeparam name="T"> The attribute. </typeparam>
        </member>
        <member name="T:OVSSerializer.Internals.OVSXmlReader">
            <summary>
            A reader that converts a single XML document by breaking down types to
            read their fields.
            </summary>
            <remarks>
            Not thread safe if you want to use the writer for multiple serializers; 
            uses quite a bit of global variables.
            </remarks>
        </member>
        <member name="M:OVSSerializer.Internals.OVSXmlReader.ByName(System.String)">
            <summary>
            Searches through all assemblies trying to match the string name
            given, considering generics along the way.
            </summary>
            <returns>The type that is defined by <paramref name="fullName"/>.</returns>
            <exception cref="T:System.MissingMemberException">The <paramref name="fullName"/> is invalid and doesn't lead to anything. </exception>
        </member>
        <member name="M:OVSSerializer.Internals.OVSXmlReader.AddAutoImplementedTag(System.String)">
            <summary>
            Adds the auto-implementation tag to an existing name.
            </summary>
        </member>
        <member name="F:OVSSerializer.Internals.OVSXmlReader.referenceTypes">
            <summary>
            Gets all reference types by the index.
            </summary>
        </member>
        <member name="P:OVSSerializer.Internals.OVSXmlReader.Document">
            <summary>
            All changes that is written to. Not thread safe.
            </summary>
        </member>
        <member name="P:OVSSerializer.Internals.OVSXmlReader.Config">
            <summary>
            The creator or source of the reader.
            </summary>
        </member>
        <member name="M:OVSSerializer.Internals.OVSXmlReader.#ctor(OVSSerializer.IOVSConfig)">
            <summary>
            Creates a new instance, assuming that <paramref name="config"/> is its
            creator.
            </summary>
            <param name="config">The creator.</param>
        </member>
        <member name="M:OVSSerializer.Internals.OVSXmlReader.ReadDocument(System.Xml.XmlDocument,System.Type)">
            <summary>
            Reads a document, checking the version before trying to read it as
            a node or element.
            </summary>
            <param name="document">The document to deserialize.</param>
            <param name="rootType">The root type.</param>
            <exception cref="T:OVSSerializer.Exceptions.VersionMismatchException"></exception>
        </member>
        <member name="M:OVSSerializer.Internals.OVSXmlReader.ReadObject(System.Xml.XmlNode,System.Type)">
            <summary>
            Reads an object, and hopefully returning a result.
            </summary>
            <param name="targetNode">The current object's representative node.</param>
            <param name="toType">The objects assumed defined type.</param>
            <returns>The parsed object, and the fields under it.</returns>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.MissingFieldException"></exception>
        </member>
        <member name="M:OVSSerializer.Internals.OVSXmlReader.AddReferenceTypeToDictionary(System.Xml.XmlElement,System.Object)">
            <summary>
            Adds a reference type to its internal dictionary, assuming it is enabled
            and has attributes to find such data.
            </summary>
            <param name="element">The element to search through and mark.</param>
            <param name="value">The created class to reference to.</param>
        </member>
        <member name="M:OVSSerializer.Internals.OVSXmlReader.SetFieldValue(System.Reflection.FieldInfo,System.Object,System.Object)">
            <summary>
            Sets the field info via the <paramref name="parent"/>. It is its own
            method for considering readonly fields.
            </summary>
            <param name="info"></param>
            <param name="parent"></param>
            <param name="setting"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:OVSSerializer.Internals.OVSXmlReferencer">
            <summary>
            Handles references of classes
            </summary>
        </member>
        <member name="T:OVSSerializer.Internals.OVSXmlWriter">
            <summary>
            A writer that converts a single object into a full <see cref="T:System.Xml.XmlDocument"/>,
            which can be written as a memory stream for serializing in documents on the
            computer.
            </summary>
            <remarks>
            Not thread safe if you want to use the writer for multiple serializers; 
            uses quite a bit of global variables.
            </remarks>
        </member>
        <member name="M:OVSSerializer.Internals.OVSXmlWriter.EnsureParameterlessConstructor(System.Type)">
            <summary>
            Throws an exception if the specified type does not have a parameterless
            constructor. Otherwise does nothing.
            </summary>
            <param name="type"> The type to check if it has one. </param>
        </member>
        <member name="P:OVSSerializer.Internals.OVSXmlWriter.Document">
            <summary>
            All changes that is written to. Not thread safe.
            </summary>
        </member>
        <member name="P:OVSSerializer.Internals.OVSXmlWriter.Config">
            <summary>
            The configuration for doing stuff.
            </summary>
        </member>
        <member name="M:OVSSerializer.Internals.OVSXmlWriter.#ctor(OVSSerializer.IOVSConfig)">
            <summary>
            Creates a new instance with a source serializer, which tracks configs.
            </summary>
        </member>
        <member name="M:OVSSerializer.Internals.OVSXmlWriter.SerializeObject(System.Object@,System.Type,System.String)">
            <summary>
            Serializes a single object into a xml file, using <see cref="P:OVSSerializer.Internals.OVSXmlWriter.Document"/>
            as to save its changes.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="type">The assumed base type of field.</param>
            <param name="name">The root name of the XML document.</param>
        </member>
        <member name="M:OVSSerializer.Internals.OVSXmlWriter.WriteObject(OVSSerializer.Internals.StructuredObject,System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Writes an object, goes through the checklist:
            <list type="number">
            <item>The <see cref="T:OVSSerializer.IOVSXmlSerializable"/> interface, assuming <see cref="P:OVSSerializer.IOVSXmlSerializable.ShouldWrite"/> is true.</item>
            <item>Serializing it as a reference.</item>
            </list>
            </summary>
            <param name="obj">The object to serialize to.</param>
            <param name="parent">The parent of the object.</param>
            <param name="name">The name of the element or attribute.</param>
            <param name="forceNormalSerialize">If it ignores all the extras and just serializes the fields, useful for external serializers.</param>
            <exception cref="T:System.Exception"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:OVSSerializer.Internals.OVSXmlWriter.ReferenceType(System.String@,OVSSerializer.Internals.StructuredObject,System.Xml.XmlNode,System.Xml.XmlNode@)">
            <summary>
            Turns the ordinary field into a reference, given there is a reference
            defined first.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:OVSSerializer.Internals.OVSXmlWriter.TryWriteInternals(OVSSerializer.Internals.FieldObject,System.Xml.XmlNode@)">
            <summary>
            Serializes the object as if it is its own parent.
            </summary>
            <param name="primitive">The object to serialize.</param>
            <param name="output">The output to write to.</param>
        </member>
        <member name="M:OVSSerializer.Internals.OVSXmlWriter.TryWritePrimitive(System.String,OVSSerializer.Internals.StructuredObject,System.Xml.XmlNode,System.Xml.XmlNode@)">
            <summary>
            Tries to write a primitive, ensuring that it is a XML element or
            XML attribute via class attribute.
            </summary>
            <param name="name">The name of the element or attribute.</param>
            <param name="primitive">The object that is hopefully primitive to serialize.</param>
            <param name="parent">The parent of the attribute or element.</param>
            <param name="output">The returned node.</param>
            <returns>If it successfully serialized it as primitive.</returns>
        </member>
        <member name="M:OVSSerializer.Internals.OVSXmlWriter.ToStringPrimitive(OVSSerializer.Internals.StructuredObject)">
            <summary>
            Converts a primitive data type, considering formattable interfaces.
            </summary>
            <param name="value">The primitive data type.</param>
            <returns>The string sexy boy</returns>
        </member>
        <member name="M:OVSSerializer.Internals.OVSXmlWriter.ToStringPrimitive(System.Object)">
            <summary>
            Converts a primitive data type, considering formattable interfaces.
            </summary>
            <param name="value">The primitive data type.</param>
            <returns>The string sexy boy</returns>
        </member>
        <member name="M:OVSSerializer.Internals.OVSXmlWriter.TryWriteCustoms(System.String,OVSSerializer.Internals.StructuredObject,System.Xml.XmlNode,System.Xml.XmlNode@)">
            <summary>
            Tries to handle the object with custom interface serializers that
            is outside of primitive data type abilities.
            </summary>
        </member>
        <member name="M:OVSSerializer.Internals.OVSXmlWriter.CreateNode(System.Xml.XmlNode,System.String,System.String,OVSSerializer.Internals.StructuredObject)">
            <summary>
            Creates a node and stores information in the value or inner text
            depending on the settings. Useful for things that print primitive
            values.
            </summary>
            <param name="parent"></param>
            <param name="name">The name of the element or attribute.</param>
            <param name="value"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:OVSSerializer.Internals.OVSXmlWriter.CreateElement(System.Xml.XmlNode,System.String,OVSSerializer.Internals.StructuredObject)">
            <summary>
            Creates a new element, adding derived types and references.
            </summary>
            <param name="parent">The parent node to append to.</param>
            <param name="name">The name of the new element.</param>
            <param name="obj">The object to consider to add types and references.</param>
            <returns>The new element to modify and change.</returns>
        </member>
        <member name="M:OVSSerializer.Internals.OVSXmlWriter.CreateElement(System.Xml.XmlNode,System.String)">
            <summary>
            Creates a new empty element.
            </summary>
            <param name="parent">The parent to append.</param>
            <param name="elementName">The name of the new element.</param>
            <returns>An empty element with the custom name.</returns>
        </member>
        <member name="M:OVSSerializer.Internals.OVSXmlWriter.CreateAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Adds an attribute to a <see cref="T:System.Xml.XmlElement"/>
            </summary>
            <param name="parentElement"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns>The attribute that has the value assigned.</returns>
        </member>
        <member name="M:OVSSerializer.Internals.OVSXmlWriter.WriteTypeAttribute(System.Xml.XmlElement,OVSSerializer.Internals.StructuredObject)">
            <summary>
            Adds a type attribute to a element
            </summary>
            <param name="element"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:OVSSerializer.Versioning">
            <summary>
            Measures Xml files to check if they are a specific version or not.
            </summary>
        </member>
        <member name="F:OVSSerializer.Versioning.VERSION_NAME">
            <summary>
            The attribute's name for finding the version on the document.
            </summary>
        </member>
        <member name="T:OVSSerializer.Versioning.Leniency">
            <summary>
            Measurement on how <see cref="T:OVSSerializer.Versioning"/> should handle variation changes
            
            </summary>
        </member>
        <member name="F:OVSSerializer.Versioning.Leniency.Strict">
            <summary>
            If the values are not exactly the same, then it will return false
            </summary>
        </member>
        <member name="F:OVSSerializer.Versioning.Leniency.Revisions">
            <summary>
            Only revisions are allowed, which is typically considered as security
            updates.
            </summary>
        </member>
        <member name="F:OVSSerializer.Versioning.Leniency.Builds">
            <summary>
            Only revisions and builds are allowed, which would be changes such 
            as bug fixes
            </summary>
        </member>
        <member name="F:OVSSerializer.Versioning.Leniency.Minor">
            <summary>
            Only things that consider backwards compatibility are allowed,
            which are simple feature addons.
            </summary>
        </member>
        <member name="F:OVSSerializer.Versioning.Leniency.All">
            <summary>
            Even majors are acceptable, so this is a 'use-all' case with the 
            rare exception of null Versions.
            </summary>
        </member>
        <member name="M:OVSSerializer.Versioning.IsVersion(System.String,System.Version,OVSSerializer.Versioning.Leniency)">
            <summary>
            Checks the version of the XML file.
            </summary>
            <param name="fileLocation"> The full file location. </param>
            <param name="version"> Comparing to/expected value </param>
            <param name="leniency">The leinency of the check</param>
        </member>
        <member name="M:OVSSerializer.Versioning.IsVersion(System.IO.FileInfo,System.Version,OVSSerializer.Versioning.Leniency)">
            <summary>
            Checks the version of the XML file.
            </summary>
            <param name="fileLocation"> The file location. </param>
            <param name="version"> Comparing to/expected value </param>
            <param name="leniency">The leinency of the check</param>
        </member>
        <member name="M:OVSSerializer.Versioning.IsVersion(System.IO.Stream,System.Version,OVSSerializer.Versioning.Leniency)">
            <summary>
            Checks the version of the XML file.
            </summary>
            <param name="input"> The document as a stream. </param>
            <param name="version"> Comparing to/expected value </param>
            <param name="leniency">The leinency of the check</param>
        </member>
        <member name="M:OVSSerializer.Versioning.IsVersion(System.Xml.XmlDocument,System.Version,OVSSerializer.Versioning.Leniency)">
            <summary>
            Checks the version of the XML file.
            </summary>
            <param name="document"> The document. </param>
            <param name="version"> Comparing to/expected value </param>
            <param name="leniency">The leinency of the check</param>
        </member>
        <member name="M:OVSSerializer.Versioning.IsVersion(System.Version,System.Version,OVSSerializer.Versioning.Leniency)">
            <summary>
            Checks the version of the XML file.
            </summary>
            <param name="altVersion"> The comparator of one version </param>
            <param name="version"> Comparing to/expected value </param>
            <param name="leniency">The leinency of the check</param>
        </member>
        <member name="T:OVSSerializer.Exceptions.ParameteredOnlyException">
            <summary>
            An error that appears when an object doesn't have a parameterless constructor.
            Only present in classes or reference types, value types like structs are
            excepted.
            </summary>
        </member>
        <member name="M:OVSSerializer.Exceptions.ParameteredOnlyException.#ctor">
            <summary>
            Initializes a new instance simply indicating that it has an empty constructor.
            </summary>
        </member>
        <member name="M:OVSSerializer.Exceptions.ParameteredOnlyException.#ctor(System.String)">
            <summary>
            Initializes a new instance basing off of the field name or class name indicating that it has an empty constructor.
            </summary>
        </member>
        <member name="T:OVSSerializer.Exceptions.SerializationFailedException">
            <summary>
            An exception that states which object has failed to serialize. Can be stacked
            multiple times to specifically pin-point where.
            </summary>
        </member>
        <member name="M:OVSSerializer.Exceptions.SerializationFailedException.#ctor">
            <summary>
            Initializes a new instance that indicates that serialization has failed.
            </summary>
        </member>
        <member name="M:OVSSerializer.Exceptions.SerializationFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance that indicates that serialization has failed,
            along with a message.
            </summary>
        </member>
        <member name="M:OVSSerializer.Exceptions.SerializationFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance that indicates that serialization has failed,
            along with a message and an inner exception.
            </summary>
        </member>
        <member name="M:OVSSerializer.Exceptions.SerializationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            No idea what this does its here because the IDE said so
            </summary>
        </member>
        <member name="T:OVSSerializer.Exceptions.VersionMismatchException">
            <summary>
            An error that appears when a version checker is mis-matched. Mostly used
            by <see cref="T:OVSSerializer.Internals.OVSXmlReader"/>
            </summary>
        </member>
        <member name="M:OVSSerializer.Exceptions.VersionMismatchException.#ctor">
            <summary>
            Initializes a new instance simply indicating that it is mismatched.
            </summary>
        </member>
        <member name="M:OVSSerializer.Exceptions.VersionMismatchException.#ctor(System.Version,System.Version)">
            <summary>
            Initializes a new instance basing off of the field name or class name indicating
            that the document version is mismatched.
            </summary>
            <param name="target">The document's targeted version.</param>
            <param name="current">The current version that configuration is on.</param>
        </member>
        <member name="T:OVSSerializer.Extras.ChangableValue`1">
            <summary>
            A value that alerts other classes and fields when modified.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OVSSerializer.Extras.ChangableValue`1.op_Implicit(OVSSerializer.Extras.ChangableValue{`0})~`0">
            <summary>
            Allows to seamlessly get the values inside of the value.
            </summary>
            <param name="input"></param>
        </member>
        <member name="E:OVSSerializer.Extras.ChangableValue`1.ValueChanged">
            <summary>
            All delegates are invoked when the value is changed.
            </summary>
        </member>
        <member name="P:OVSSerializer.Extras.ChangableValue`1.Value">
            <summary>
            Gets or sets the current Value.
            </summary>
        </member>
        <member name="M:OVSSerializer.Extras.ChangableValue`1.#ctor">
            <summary>
            Creates a new value, using default values as initializer.
            </summary>
        </member>
        <member name="M:OVSSerializer.Extras.ChangableValue`1.#ctor(`0)">
            <summary>
            Creates a new value.
            </summary>
            <param name="default"> The starting value. Usually as initial value. </param>
        </member>
        <member name="M:OVSSerializer.Extras.ChangableValue`1.AttachValue(System.Action{`0})">
            <summary>
            Setting the expected field and alerts future changes to the delegate.
            </summary>
            <param name="input"> The delegate that targets the field. </param>
        </member>
        <member name="T:OVSSerializer.Extras.ChangableStructure`1">
            <summary>
            A value that alerts other classes and fields when modified. Allows usage
            of structs and classes.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OVSSerializer.Extras.ChangableStructure`1.op_Implicit(OVSSerializer.Extras.ChangableStructure{`0})~`0">
            <summary>
            Allows to seamlessly get the values inside of the value.
            </summary>
            <param name="input"></param>
        </member>
        <member name="E:OVSSerializer.Extras.ChangableStructure`1.ValueChanged">
            <summary>
            All delegates are invoked when the value is changed.
            </summary>
        </member>
        <member name="P:OVSSerializer.Extras.ChangableStructure`1.Value">
            <summary>
            Gets or sets the current Value.
            </summary>
        </member>
        <member name="M:OVSSerializer.Extras.ChangableStructure`1.#ctor">
            <summary>
            Creates a new value, using default values as initializer.
            </summary>
        </member>
        <member name="M:OVSSerializer.Extras.ChangableStructure`1.#ctor(`0)">
            <summary>
            Creates a new value.
            </summary>
            <param name="default"> The starting value. Usually as initial value. </param>
        </member>
        <member name="M:OVSSerializer.Extras.ChangableStructure`1.AttachValue(System.Action{`0})">
            <summary>
            Setting the expected field and alerts future changes to the delegate.
            </summary>
            <param name="input"> The delegate that targets the field. </param>
        </member>
        <member name="T:OVSSerializer.Extras.XmlDocumentUtility">
            <summary>
            Extra helper methods to make making XML Documents easier.
            </summary>
        </member>
        <member name="M:OVSSerializer.Extras.XmlDocumentUtility.LoadNew(System.IO.Stream)">
            <summary>
            Creates a new <see cref="T:System.Xml.XmlDocument"/> along with loading a xml file.
            </summary>
        </member>
        <member name="M:OVSSerializer.Extras.XmlDocumentUtility.LoadNew(System.IO.FileInfo)">
            <summary>
            Creates a new <see cref="T:System.Xml.XmlDocument"/> along with loading a xml file.
            </summary>
        </member>
        <member name="M:OVSSerializer.Extras.XmlDocumentUtility.LoadNew(System.String)">
            <summary>
            Creates a new <see cref="T:System.Xml.XmlDocument"/> along with loading a xml file.
            </summary>
        </member>
        <member name="M:OVSSerializer.Extras.XmlDocumentUtility.LoadNew(System.Xml.XmlReader)">
            <summary>
            Creates a new <see cref="T:System.Xml.XmlDocument"/> along with loading a xml file.
            </summary>
        </member>
        <member name="M:OVSSerializer.Extras.XmlDocumentUtility.LoadNew(System.IO.TextReader)">
            <summary>
            Creates a new <see cref="T:System.Xml.XmlDocument"/> along with loading a xml file.
            </summary>
        </member>
        <member name="M:OVSSerializer.Extras.XmlDocumentUtility.Load(System.Xml.XmlDocument,System.IO.Stream)">
            <summary>
            Loads an existing <see cref="T:System.Xml.XmlDocument"/> and allows it to be
            chainable.
            </summary>
            <param name="document"> The document to write to. </param>
            <param name="stream"> The stream to load from. Set position to 0 if having issues. </param>
        </member>
        <member name="M:OVSSerializer.Extras.XmlDocumentUtility.Load(System.Xml.XmlDocument,System.IO.FileInfo)">
            <summary>
            Loads an existing <see cref="T:System.Xml.XmlDocument"/> and allows it to be
            chainable.
            </summary>
            <param name="document"> The document to write to. </param>
            <param name="file"> The file to load from. </param>
        </member>
        <member name="M:OVSSerializer.Extras.XmlDocumentUtility.Load(System.Xml.XmlDocument,System.String)">
            <summary>
            Loads an existing <see cref="T:System.Xml.XmlDocument"/> and allows it to be
            chainable.
            </summary>
            <param name="document"> The document to write to. </param>
            <param name="fileName"> The full fileName to copy the file from. </param>
        </member>
        <member name="M:OVSSerializer.Extras.XmlDocumentUtility.Load(System.Xml.XmlDocument,System.Xml.XmlReader)">
            <summary>
            Loads an existing <see cref="T:System.Xml.XmlDocument"/> and allows it to be
            chainable.
            </summary>
            <param name="document"> The document to write to. </param>
            <param name="reader"> The reader to load from. </param>
        </member>
        <member name="M:OVSSerializer.Extras.XmlDocumentUtility.Load(System.Xml.XmlDocument,System.IO.TextReader)">
            <summary>
            Loads an existing <see cref="T:System.Xml.XmlDocument"/> and allows it to be
            chainable.
            </summary>
            <param name="document"> The document to write to. </param>
            <param name="reader"> The Xml Reader to copy from. </param>
        </member>
        <member name="T:OVSSerializer.Extras.XMLNodeUtility">
            <summary>
            Additional utilities for handling <see cref="T:System.Xml.XmlNode"/>s.
            </summary>
        </member>
        <member name="M:OVSSerializer.Extras.XMLNodeUtility.ToList(System.Xml.XmlNodeList)">
            <summary>
            Converts all node children to a generic .NET list.
            </summary>
        </member>
        <member name="M:OVSSerializer.Extras.XMLNodeUtility.FindIndex(System.Xml.XmlNodeList,System.Predicate{System.Xml.XmlNode})">
            <summary>
            Finds the index from the first success of predicate.
            </summary>
        </member>
        <member name="M:OVSSerializer.Extras.XMLNodeUtility.Find(System.Xml.XmlNodeList,System.Predicate{System.Xml.XmlNode})">
            <summary>
            Finds the node from the first success of predicate.
            </summary>
        </member>
        <member name="M:OVSSerializer.Extras.XMLNodeUtility.FindNamedNode(System.Xml.XmlNodeList,System.String)">
            <summary>
            Finds the node from the first matching name.
            </summary>
        </member>
        <member name="M:OVSSerializer.Extras.XMLNodeUtility.FindNamedNodeIndex(System.Xml.XmlNodeList,System.String)">
            <summary>
            Finds the index from the first matching name.
            </summary>
        </member>
        <member name="M:OVSSerializer.Extras.XMLNodeUtility.GetNode(System.Xml.XmlNode,System.String)">
            <summary>
            Gets the node from <paramref name="name"/>, reading both attributes and
            children.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"/>
        </member>
        <member name="M:OVSSerializer.Extras.XMLNodeUtility.GetAllChildren(System.Xml.XmlNode)">
            <summary>
            Gets all children, compiling the attributes and child nodes excluding
            <see cref="T:OVSSerializer.OVSXmlSerializer"/>'s custom attributes.
            </summary>
        </member>
        <member name="M:OVSSerializer.Extras.XMLNodeUtility.ReadValue(System.Xml.XmlNode)">
            <summary>
            Reads the value of the node, ignoring the type of the node.
            </summary>
        </member>
        <member name="T:OVSSerializer.Inheritor">
            <summary>
            Introduces the Inherit method to the serializers, although it can be used
            directly. 
            </summary>
        </member>
        <member name="M:OVSSerializer.Inheritor.Inherit``1(OVSSerializer.OVSXmlSerializer{``0},``0,System.IO.Stream)">
            <summary>
            Takes info from <paramref name="stream"/> and copies its fields
            into the <paramref name="inputReference"/>; Effectively shallow copying.
            </summary>
            <param name="serializer">The serializer to get the info to copy from.</param>
            <param name="inputReference">The item to copy info to.</param>
            <param name="stream">The info is stored from in the stream, should be XML.</param>
        </member>
        <member name="M:OVSSerializer.Inheritor.Inherit``1(OVSSerializer.OVSXmlSerializer{``0},``0,System.IO.FileInfo)">
            <summary>
            Takes info from <paramref name="filePath"/> and copies its fields
            into the <paramref name="inputReference"/>; Effectively shallow copying.
            </summary>
            <param name="serializer">The serializer to get the info to copy from.</param>
            <param name="inputReference">The item to copy info to.</param>
            <param name="filePath">The info is stored from in file path.</param>
        </member>
        <member name="M:OVSSerializer.Inheritor.Inherit``1(OVSSerializer.OVSXmlSerializer{``0},``0,OVSSerializer.IO.OSFile)">
            <summary>
            Takes info from <paramref name="filePath"/> and copies its fields
            into the <paramref name="inputReference"/>; Effectively shallow copying.
            </summary>
            <param name="serializer">The serializer to get the info to copy from.</param>
            <param name="inputReference">The item to copy info to.</param>
            <param name="filePath">The info is stored from in file path.</param>
        </member>
        <member name="M:OVSSerializer.Inheritor.Inherit``1(OVSSerializer.OVSXmlSerializer{``0},``0,System.String)">
            <summary>
            Takes info from <paramref name="filePath"/> and copies its fields
            into the <paramref name="inputReference"/>; Effectively shallow copying.
            </summary>
            <param name="serializer">The serializer to get the info to copy from.</param>
            <param name="inputReference">The item to copy info to.</param>
            <param name="filePath">The info is stored from in file path.</param>
        </member>
        <member name="M:OVSSerializer.Inheritor.Inherit``1(``0,``0@)">
            <summary>
            Takes info from <paramref name="deserialized"/> and copies its fields
            into the <paramref name="inputReference"/>; Effectively shallow copying.
            </summary>
            <param name="inputReference">The item to copy info to.</param>
            <param name="deserialized">The info is stored from.</param>
        </member>
        <member name="T:OVSSerializer.IO.OSChanger">
            <summary>
            Typically turns ordinary separate file references where changing names and such into a solid change.
            </summary>
        </member>
        <member name="M:OVSSerializer.IO.OSChanger.RenameExtension(OVSSerializer.IO.OSFile,System.String)">
            <summary>
            Renames an existing file, or if it doesn't exist, just changes the name
            normally.
            </summary>
            <param name="fromFile">The file to rename to.</param>
            <param name="extension">The extension to change to. </param>
            <returns>
            A new <see cref="T:OVSSerializer.IO.OSFile"/> that reflects on the new name; old file is untouched.
            </returns>
        </member>
        <member name="M:OVSSerializer.IO.OSChanger.Rename(OVSSerializer.IO.OSFile,System.String)">
            <summary>
            Renames an existing file, or if it doesn't exist, just changes the name
            normally.
            </summary>
            <param name="fromFile">The file to rename to.</param>
            <param name="name">The new name of the file.</param>
            <returns>
            A new <see cref="T:OVSSerializer.IO.OSFile"/> that reflects on the new name; old file is untouched.
            </returns>
        </member>
        <member name="M:OVSSerializer.IO.OSChanger.RenameWithoutExtension(OVSSerializer.IO.OSFile,System.String)">
            <summary>
            Renames an existing file, or if it doesn't exist, just changes the name
            normally. This particular command allows to keep the same extension.
            </summary>
            <param name="fromFile">The file to rename to.</param>
            <param name="name">The new name of the file, excluding the extension as they are inherited.</param>
            <returns>
            A new <see cref="T:OVSSerializer.IO.OSFile"/> that reflects on the new name; old file is untouched.
            </returns>
        </member>
        <member name="M:OVSSerializer.IO.OSChanger.Rename(OVSSerializer.IO.OSDirectory,System.String)">
            <summary>
            Renames an existing file, or if it doesn't exist, just changes the name
            normally.
            </summary>
            <param name="fromDirectory">The directory to rename to.</param>
            <param name="name">The new name of the file.</param>
            <returns>
            A new <see cref="T:OVSSerializer.IO.OSFile"/> that reflects on the new name; old file is untouched.
            </returns>
        </member>
        <member name="M:OVSSerializer.IO.OSChanger.StartProcess(OVSSerializer.IO.OSSystemInfo)">
            <summary>
            Starts the file or directory using <see cref="M:System.Diagnostics.Process.Start"/>.
            </summary>
        </member>
        <member name="T:OVSSerializer.IO.OSDirectory">
            <summary>
            Directory info that considers unix-based and windows systems.
            </summary>
        </member>
        <member name="M:OVSSerializer.IO.OSDirectory.op_Explicit(OVSSerializer.IO.OSDirectory)~System.IO.DirectoryInfo">
            <summary> Converts OSDir to system directory info.</summary>
        </member>
        <member name="M:OVSSerializer.IO.OSDirectory.op_Explicit(System.IO.DirectoryInfo)~OVSSerializer.IO.OSDirectory">
            <summary> Converts system directory info to OSDir.</summary>
        </member>
        <member name="M:OVSSerializer.IO.OSDirectory.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Creates a new instance based off of an existing info directory.
            </summary>
        </member>
        <member name="M:OVSSerializer.IO.OSDirectory.#ctor(OVSSerializer.IO.OSDirectory)">
            <summary>
            Copies the directory as a separate reference type.
            </summary>
        </member>
        <member name="M:OVSSerializer.IO.OSDirectory.#ctor(OVSSerializer.IO.OSPath)">
            <summary>
            Initializes a directory info from a string path.
            </summary>
        </member>
        <member name="P:OVSSerializer.IO.OSDirectory.Name">
            <summary>
            Gets the name of the directory, setting it will only change the class
            data.
            </summary>
        </member>
        <member name="P:OVSSerializer.IO.OSDirectory.Exists">
            <summary>
            If the directory exists or not. Setting it creates a new empty or 
            deletes it entirely.
            </summary>
        </member>
        <member name="M:OVSSerializer.IO.OSDirectory.Create">
            <summary>
            Creates all directories and subdirectories in the path unless they
            already exist.
            </summary>
        </member>
        <member name="M:OVSSerializer.IO.OSDirectory.GetSubdirectories(System.String[])">
            <summary>
            Creates subdirectories.
            </summary>
            <param name="subDirectories">The subdirectory names. </param>
            <returns>The final directory listed in <paramref name="subDirectories"/>.</returns>
        </member>
        <member name="M:OVSSerializer.IO.OSDirectory.GetSubdirectories(System.Boolean,System.String[])">
            <summary>
            Creates subdirectories.
            </summary>
            <param name="createDirectories">If the directories should be created.</param>
            <param name="subDirectories">The subdirectory names. </param>
            <returns>The final directory listed in <paramref name="subDirectories"/>.</returns>
        </member>
        <member name="M:OVSSerializer.IO.OSDirectory.EnumerateDirectories">
            <summary>
            Enumerates through directories that is in the current directory.
            </summary>
        </member>
        <member name="M:OVSSerializer.IO.OSDirectory.GetDirectories">
            <summary>
            Gets all directories into an array.
            </summary>
        </member>
        <member name="M:OVSSerializer.IO.OSDirectory.EnumerateFiles">
            <summary>
            Enumerates through files that is in the current directory.
            </summary>
        </member>
        <member name="M:OVSSerializer.IO.OSDirectory.GetFiles">
            <summary>
            Gets all files into an array.
            </summary>
        </member>
        <member name="M:OVSSerializer.IO.OSDirectory.GetFiles(System.Predicate{OVSSerializer.IO.OSFile})">
            <summary>
            Gets all files, and then filters them through a predicate.
            </summary>
        </member>
        <member name="M:OVSSerializer.IO.OSDirectory.GetFiles(System.String[])">
            <summary>
            Creates new files 
            </summary>
        </member>
        <member name="M:OVSSerializer.IO.OSDirectory.GetFile(System.String)">
            <summary>
            Gets some file metadata to manipulate. 
            </summary>
            <param name="fileNameAndExtension">The file name and its extension of the file.</param>
            <returns>The (possibly non-existent) file info.</returns>
        </member>
        <member name="M:OVSSerializer.IO.OSDirectory.GetFileIncremental(System.String,System.Boolean)">
            <summary>
            Enumerates and finds an empty slot based on <paramref name="fileName"/>,
            adding <c>_{index}</c> between the extension and the name itself (or
            just adding it normally if it doesn't have an extension).
            </summary>
            <param name="fileName">The desired file name.</param>
            <param name="alwaysIncludeNumber">
            This will always contains a number from 0 and above, instead of starting
            at 1 when a copy already exists.
            </param>
            <returns>A file info that doesn't exist (yet).</returns>
        </member>
        <member name="M:OVSSerializer.IO.OSDirectory.Delete">
            <summary>
            Deletes the directory and everything in it.
            </summary>
            <returns>if it used to exist.</returns>
        </member>
        <member name="M:OVSSerializer.IO.OSDirectory.MoveTo(OVSSerializer.IO.OSDirectory)">
            <summary>
            Moves the directory and its contents into another directory, by
            first copying it and deleting itself afterwards.
            </summary>
            <param name="intoDirectory">The new parent directory.</param>
        </member>
        <member name="M:OVSSerializer.IO.OSDirectory.CopyTo(OVSSerializer.IO.OSDirectory)">
            <summary>
            Copies the directory and its contents into another directory, by 
            creating and destroying after.
            </summary>
            <param name="intoDirectory">Copy the directory and its contents to.</param>
            <returns>The new directory that hopefully contains the same contents.</returns>
        </member>
        <member name="M:OVSSerializer.IO.OSDirectory.Equals(OVSSerializer.IO.OSDirectory)">
            <inheritdoc/>
        </member>
        <member name="M:OVSSerializer.IO.OSDirectory.Equals(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:OVSSerializer.IO.OSExtension">
            <summary>
            A class that handles extensions. Exists to easily modify extensions easily.
            </summary>
        </member>
        <member name="M:OVSSerializer.IO.OSExtension.HasExtension(System.String@)">
            <summary>
            If the filePath has an extension.
            </summary>
            <param name="inputPath"> The file path to check.</param>
        </member>
        <member name="M:OVSSerializer.IO.OSExtension.HasExtension(System.String@,System.Int32@)">
            <summary>
            If the filePath has an extension.
            </summary>
            <param name="inputPath"> The file path to check.</param>
            <param name="startExtension"> The index where the extension starts.</param>
        </member>
        <member name="M:OVSSerializer.IO.OSExtension.RemoveExtension(System.String@)">
            <summary>
            Removes the extension from input file path, assuming it exists.
            </summary>
            <param name="input"> The file path to remove the extension from. </param>
        </member>
        <member name="M:OVSSerializer.IO.OSExtension.AddExtension(System.String,System.String)">
            <summary>
            Adds a new extension to the given file path, but removing the old extension
            if it exists.
            </summary>
            <param name="input">The given file path.</param>
            <param name="extension">The new extension.</param>
            <exception cref="T:System.InvalidCastException">If it is not a file path.</exception>
        </member>
        <member name="T:OVSSerializer.IO.OSFile">
            <summary>
            File info that considers unix-based and windows systems.
            </summary>
        </member>
        <member name="M:OVSSerializer.IO.OSFile.op_Explicit(OVSSerializer.IO.OSFile)~System.IO.FileInfo">
            <summary>
            Explicitly converts a <see cref="T:System.IO.FileInfo"/> to an <see cref="T:OVSSerializer.IO.OSFile"/>
            </summary>
        </member>
        <member name="M:OVSSerializer.IO.OSFile.op_Explicit(System.IO.FileInfo)~OVSSerializer.IO.OSFile">
            <summary>
            Explicitly converts a <see cref="T:OVSSerializer.IO.OSFile"/> to an <see cref="T:System.IO.FileInfo"/>
            </summary>
        </member>
        <member name="M:OVSSerializer.IO.OSFile.#ctor(OVSSerializer.IO.OSPath)">
            <summary>
            Creates a metadata or file info via directory or path.
            </summary>
        </member>
        <member name="M:OVSSerializer.IO.OSFile.#ctor(OVSSerializer.IO.OSFile)">
            <summary>
            Copies an OSFile as another reference.
            </summary>
        </member>
        <member name="M:OVSSerializer.IO.OSFile.#ctor(System.IO.FileInfo)">
            <summary>
            Converts a fileinfo to an OSfile.
            </summary>
        </member>
        <member name="P:OVSSerializer.IO.OSFile.Name">
            <summary>
            The name of the file; Extension included. Use <see cref="M:OVSSerializer.IO.OSChanger.Rename(OVSSerializer.IO.OSFile,System.String)"/>
            to also change the file itself located on the disk.
            </summary>
        </member>
        <member name="P:OVSSerializer.IO.OSFile.Extension">
            <summary>
            Gets or sets the extension of the file. Typically starts with <c>'.'</c>
            </summary>
        </member>
        <member name="P:OVSSerializer.IO.OSFile.NameWithoutExtension">
            <summary>
            Gets or sets the name that has the extension removed.
            </summary>
        </member>
        <member name="P:OVSSerializer.IO.OSFile.Exists">
            <summary>
            If the file actually exists or not. Setting it to <see langword="true"/> creates a new 'text'
            file that is empty, or deletes it as <see langword="false"/>.
            </summary>
        </member>
        <member name="M:OVSSerializer.IO.OSFile.Open(System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens the file as a stream.
            </summary>
        </member>
        <member name="M:OVSSerializer.IO.OSFile.Append">
            <summary>
            Opens and keeps the data on the file to add onto, write-only. 
            useful for logs
            </summary>
        </member>
        <member name="M:OVSSerializer.IO.OSFile.OpenRead">
            <summary>
            Opens the file for reading.
            </summary>
        </member>
        <member name="M:OVSSerializer.IO.OSFile.Create">
            <summary>
            Creates (or overwrites) to an empty file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OVSSerializer.IO.OSFile.ReadAllText">
            <summary>
            Reads all texts of the file, assuming it exists.
            </summary>
        </member>
        <member name="M:OVSSerializer.IO.OSFile.ReadAllLines(System.Char)">
            <summary>
            Reads all text and splits on new line, or the input parameter.
            </summary>
        </member>
        <member name="M:OVSSerializer.IO.OSFile.WriteAllText(System.String)">
            <summary>
            Creates a new file and writes all the text that is given.
            </summary>
        </member>
        <member name="T:OVSSerializer.IO.OSPath">
            <summary>
            A highly complicated 'string' that purely only cares about the path.
            Do not use this as an actual class that can do stuff!
            </summary>
            <remarks> 
            Prints the path that can be used and is the same as <see cref="P:OVSSerializer.IO.OSPath.Normalized"/>.
            <para>
            Shoutout to that one guy i took this from and forgot who made this, thanks
            for the help ;)
            </para>
            </remarks>
        </member>
        <member name="F:OVSSerializer.IO.OSPath.Empty">
            <summary>
            A path that leads to nothing.
            </summary>
        </member>
        <member name="P:OVSSerializer.IO.OSPath.DirectorySeparatorChar">
            <summary>
            Provides a platform-specific character used to separate directory 
            levels in a path string that reflects a hierarchical file system 
            organization.
            </summary>
        </member>
        <member name="P:OVSSerializer.IO.OSPath.IsWindows">
            <summary>
            Is the currently selected OS is windows.
            </summary>
        </member>
        <member name="M:OVSSerializer.IO.OSPath.#ctor(System.String)">
            <summary>
            Creates a new path with the specified file path.
            </summary>
        </member>
        <member name="M:OVSSerializer.IO.OSPath.ToString">
            <summary>
            Gets <see cref="P:OVSSerializer.IO.OSPath.Normalized"/> as a full path.
            </summary>
        </member>
        <member name="P:OVSSerializer.IO.OSPath.Normalized">
            <summary>
            Gets the normalized full path.
            </summary>
        </member>
        <member name="P:OVSSerializer.IO.OSPath.Windows">
            <summary>
            Gets the path for windows platforms.
            </summary>
        </member>
        <member name="P:OVSSerializer.IO.OSPath.Unix">
            <summary>
            Gets the path for unix platforms like Linux or Mac-OS
            </summary>
        </member>
        <member name="P:OVSSerializer.IO.OSPath.Split">
            <summary>
            The path being split with directory separators.
            </summary>
        </member>
        <member name="P:OVSSerializer.IO.OSPath.Parent">
            <summary>
            The parent of the file or directory.
            </summary>
        </member>
        <member name="M:OVSSerializer.IO.OSPath.Contains(OVSSerializer.IO.OSPath)">
            <summary>
            If the path is in a certain directory.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="P:OVSSerializer.IO.OSPath.Length">
            <summary>
            The length of the path.
            </summary>
        </member>
        <member name="T:OVSSerializer.IO.OSSystemInfo">
            <summary>
            Information about a folder or file.
            </summary>
        </member>
        <member name="P:OVSSerializer.IO.OSSystemInfo.FullPath">
            <summary>
            The full path, regards Unix-based and windows systems.
            </summary>
        </member>
        <member name="P:OVSSerializer.IO.OSSystemInfo.Name">
            <summary>
            The name of the ending path. Setting only changes <see cref="P:OVSSerializer.IO.OSSystemInfo.FullPath"/>.
            </summary>
        </member>
        <member name="P:OVSSerializer.IO.OSSystemInfo.Exists">
            <summary>
            If the path exists. Setting impacts the files.
            </summary>
        </member>
        <member name="M:OVSSerializer.IO.OSSystemInfo.Delete">
            <summary>
            To delete the path.
            </summary>
            <returns>If the path used to exist.</returns>
        </member>
        <member name="M:OVSSerializer.IO.OSSystemInfo.MoveTo(OVSSerializer.IO.OSDirectory)">
            <summary>
            Moves the path and its contents to another directory.
            </summary>
        </member>
        <member name="M:OVSSerializer.IO.OSSystemInfo.CopyTo(OVSSerializer.IO.OSDirectory)">
            <summary>
            Moves the path and its contents to another directory.
            </summary>
        </member>
        <member name="P:OVSSerializer.IO.OSSystemInfo.Parent">
            <summary>
            The parent of the file or directory.
            </summary>
        </member>
        <member name="T:OVSSerializer.IOVSXmlSerializable">
            <summary>
            Instead of writing automatically, this allows you to have more control
            over saving the object.
            </summary>
            <remarks>
            Something like <see cref="T:OVSSerializer.ICustomSerializer"/> as their own class provides
            more control and allows usage of writers and readers to serialize.
            </remarks>
        </member>
        <member name="P:OVSSerializer.IOVSXmlSerializable.ShouldWrite">
            <summary>
            If the value should be serialized at all. Roughly similar to 
            <see cref="T:System.Xml.Serialization.XmlIgnoreAttribute"/>
            </summary>
        </member>
        <member name="M:OVSSerializer.IOVSXmlSerializable.Read(System.Xml.XmlNode)">
            <summary>
            Reads the data of the existing node.
            </summary>
            <param name="value"> Nullable. </param>
        </member>
        <member name="M:OVSSerializer.IOVSXmlSerializable.Write(System.Xml.XmlNode)">
            <summary>
            Writes the content of class or struct. Use <see cref="P:System.Xml.XmlNode.OwnerDocument"/>
            in order to create attributes or elements.
            </summary>
            <remarks>
            The element is already generated for you, so no need to start or end an element.
            </remarks>
            <param name="currentNode">A non-parent node to store the custom data.</param>
        </member>
        <member name="T:OVSSerializer.OVSXmlSerializer">
            <summary>
            A class that serializes or deserializes an object assuming that base class is a
            <see cref="T:System.Object"/>
            into an xml document/format.
            </summary>
        </member>
        <member name="P:OVSSerializer.OVSXmlSerializer.Shared">
            <summary>
            Gets the non-generic shared version of the serializer.
            </summary>
        </member>
        <member name="F:OVSSerializer.OVSXmlSerializer.ATTRIBUTE">
            <summary>
            Whenever a type is unclear or is more defined than given in the object
            field, it will use the type attribute in order to successfully create the
            object.
            </summary>
        </member>
        <member name="F:OVSSerializer.OVSXmlSerializer.defaultFlags">
            <summary>
            The default flags to serialize instance field data.
            </summary>
        </member>
        <member name="M:OVSSerializer.OVSXmlSerializer.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:OVSSerializer.OVSXmlSerializer.#ctor(OVSSerializer.IOVSConfig)">
            <inheritdoc/>
        </member>
        <member name="T:OVSSerializer.OVSXmlSerializer`1">
            <summary>
            A class that serializes or deserializes an object given <typeparamref name="T"/>
            into an xml document/format.
            </summary>
        </member>
        <member name="P:OVSSerializer.OVSXmlSerializer`1.Shared">
            <summary>
            Gets the generic shared version of the serializer.
            </summary>
        </member>
        <member name="P:OVSSerializer.OVSXmlSerializer`1.CurrentCulture">
            <inheritdoc/>
        </member>
        <member name="P:OVSSerializer.OVSXmlSerializer`1.UseSingleInstanceInsteadOfMultiple">
            <inheritdoc/>
        </member>
        <member name="P:OVSSerializer.OVSXmlSerializer`1.Version">
            <inheritdoc/>
        </member>
        <member name="P:OVSSerializer.OVSXmlSerializer`1.IgnoreUndefinedValues">
            <inheritdoc/>
        </member>
        <member name="P:OVSSerializer.OVSXmlSerializer`1.CustomSerializers">
            <inheritdoc/>
        </member>
        <member name="P:OVSSerializer.OVSXmlSerializer`1.OmitAutoGenerationComment">
            <inheritdoc/>
        </member>
        <member name="P:OVSSerializer.OVSXmlSerializer`1.VersionLeniency">
            <inheritdoc/>
        </member>
        <member name="P:OVSSerializer.OVSXmlSerializer`1.NewLineOnAttributes">
            <inheritdoc/>
        </member>
        <member name="P:OVSSerializer.OVSXmlSerializer`1.OmitXmlDelcaration">
            <inheritdoc/>
        </member>
        <member name="P:OVSSerializer.OVSXmlSerializer`1.IndentChars">
            <inheritdoc/>
        </member>
        <member name="P:OVSSerializer.OVSXmlSerializer`1.Indent">
            <inheritdoc/>
        </member>
        <member name="P:OVSSerializer.OVSXmlSerializer`1.StandaloneDeclaration">
            <inheritdoc/>
        </member>
        <member name="P:OVSSerializer.OVSXmlSerializer`1.TypeHandling">
            <inheritdoc/>
        </member>
        <member name="P:OVSSerializer.OVSXmlSerializer`1.HandleReadonlyFields">
            <inheritdoc/>
        </member>
        <member name="P:OVSSerializer.OVSXmlSerializer`1.Encoding">
            <inheritdoc/>
        </member>
        <member name="P:OVSSerializer.OVSXmlSerializer`1.WriterSettings">
            <inheritdoc/>
        </member>
        <member name="M:OVSSerializer.OVSXmlSerializer`1.#ctor">
            <summary>
            Creates a new serializer with default config settings.
            </summary>
        </member>
        <member name="M:OVSSerializer.OVSXmlSerializer`1.#ctor(OVSSerializer.IOVSConfig)">
            <summary>
            Creates a new serializer with the specified config settings.
            </summary>
        </member>
        <member name="M:OVSSerializer.OVSXmlSerializer`1.Serialize(`0)">
            <summary>
            Serializes the specified <paramref name="item"/> as a XML file in a
            stream.
            </summary>
            <param name="item"> The item to serialize. </param>
            <returns> A serialized object with the XML format. </returns>
        </member>
        <member name="M:OVSSerializer.OVSXmlSerializer`1.Serialize(`0,System.String)">
            <summary>
            Serializes the specified <paramref name="item"/> as a XML file in a
            stream.
            </summary>
            <param name="item"> The item to serialize. </param>
            <param name="rootElementName">The root element within the xml file. </param>
            <returns> A serialized object with the XML format. </returns>
        </member>
        <member name="M:OVSSerializer.OVSXmlSerializer`1.Serialize(System.IO.FileInfo,`0)">
            <summary>
            Serializes the specified <paramref name="item"/> as a XML file in a
            file.
            </summary>
            <param name="file"> The file to write to. </param>
            <param name="item"> The item to serialize. </param>
            <returns> A serialized object with the XML format. </returns>
        </member>
        <member name="M:OVSSerializer.OVSXmlSerializer`1.Serialize(System.IO.FileInfo,`0,System.String)">
            <summary>
            Serializes the specified <paramref name="item"/> as a XML file in a
            file.
            </summary>
            <param name="file"> The file to write to. </param>
            <param name="item"> The item to serialize. </param>
            <param name="rootElementName">The root element within the xml file. </param>
            <returns> A serialized object with the XML format. </returns>
        </member>
        <member name="M:OVSSerializer.OVSXmlSerializer`1.Serialize(OVSSerializer.IO.OSFile,`0)">
            <summary>
            Serializes the specified <paramref name="item"/> as a XML file in a
            file.
            </summary>
            <param name="file"> The file to write to. </param>
            <param name="item"> The item to serialize. </param>
            <returns> A serialized object with the XML format. </returns>
        </member>
        <member name="M:OVSSerializer.OVSXmlSerializer`1.Serialize(OVSSerializer.IO.OSFile,`0,System.String)">
            <summary>
            Serializes the specified <paramref name="item"/> as a XML file in a
            file.
            </summary>
            <param name="file"> The file to write to. </param>
            <param name="item"> The item to serialize. </param>
            <param name="rootElementName">The root element within the xml file. </param>
            <returns> A serialized object with the XML format. </returns>
        </member>
        <member name="M:OVSSerializer.OVSXmlSerializer`1.Serialize(System.String,`0)">
            <summary>
            Serializes the specified <paramref name="item"/> as a XML file in a
            file.
            </summary>
            <param name="fileLocation"> The file to write to. </param>
            <param name="item"> The item to serialize. </param>
            <returns> A serialized object with the XML format. </returns>
        </member>
        <member name="M:OVSSerializer.OVSXmlSerializer`1.Serialize(System.String,`0,System.String)">
            <summary>
            Serializes the specified <paramref name="item"/> as a XML file in a
            file.
            </summary>
            <param name="fileLocation"> The file to write to. </param>
            <param name="item"> The item to serialize. </param>
            <param name="rootElementName">The root element within the xml file. </param>
            <returns> A serialized object with the XML format. </returns>
        </member>
        <member name="M:OVSSerializer.OVSXmlSerializer`1.Serialize(System.IO.Stream,`0)">
            <summary>
            Serializes into the inputted stream as an XML document.
            </summary>
        </member>
        <member name="M:OVSSerializer.OVSXmlSerializer`1.Deserialize(System.IO.Stream)">
            <summary>
            Converts a xml file into an object. 
            </summary>
            <param name="input"> The stream that contains the XML file. </param>
            <returns> 
            The object, default or <see langword="null"/> if the xml file or stream is empty. 
            </returns>
        </member>
        <member name="M:OVSSerializer.OVSXmlSerializer`1.Deserialize(System.IO.Stream,System.String@)">
            <summary>
            Converts a xml file into an object. 
            </summary>
            <param name="input"> The stream that contains the XML file. </param>
            <param name="rootElementName">The root element name.</param>
            <returns> 
            The object, default or <see langword="null"/> if the xml file or stream is empty. 
            </returns>
        </member>
        <member name="M:OVSSerializer.OVSXmlSerializer`1.Deserialize(System.IO.FileInfo)">
            <summary>
            Converts a xml file into an object.
            </summary>
            <param name="fileLocation">The file location that contains the XML contents. </param>
            <returns> 
            The object, default or <see langword="null"/> if the xml file or stream is empty. 
            </returns>
        </member>
        <member name="M:OVSSerializer.OVSXmlSerializer`1.Deserialize(System.IO.FileInfo,System.String@)">
            <summary>
            Converts a xml file into an object.
            </summary>
            <param name="fileLocation">The file location that contains the XML contents. </param>
            <param name="rootElementName">
            The root element name, in contrast of the <see cref="M:OVSSerializer.OVSXmlSerializer`1.Serialize(System.IO.FileInfo,`0,System.String)"/>
            element name.
            </param>
            <returns> 
            The object, default or <see langword="null"/> if the xml file or stream is empty. 
            </returns>
        </member>
        <member name="M:OVSSerializer.OVSXmlSerializer`1.Deserialize(OVSSerializer.IO.OSFile)">
            <summary>
            Converts a xml file into an object.
            </summary>
            <param name="fileLocation">The file location that contains the XML contents. </param>
            <returns> 
            The object, default or <see langword="null"/> if the xml file or stream is empty. 
            </returns>
        </member>
        <member name="M:OVSSerializer.OVSXmlSerializer`1.Deserialize(OVSSerializer.IO.OSFile,System.String@)">
            <summary>
            Converts a xml file into an object.
            </summary>
            <param name="fileLocation">The file location that contains the XML contents. </param>
            <param name="rootElementName">
            The root element name, in contrast of the <see cref="M:OVSSerializer.OVSXmlSerializer`1.Serialize(System.IO.FileInfo,`0,System.String)"/>
            element name.
            </param>
            <returns> 
            The object, default or <see langword="null"/> if the xml file or stream is empty. 
            </returns>
        </member>
        <member name="M:OVSSerializer.OVSXmlSerializer`1.Deserialize(System.String)">
            <summary>
            Converts a xml file into an object.
            </summary>
            <param name="fileLocation">The file location that contains the XML contents. </param>
            <returns> 
            The object, default or <see langword="null"/> if the xml file or stream is empty. 
            </returns>
        </member>
        <member name="M:OVSSerializer.OVSXmlSerializer`1.Deserialize(System.String,System.String@)">
            <summary>
            Converts a xml file into an object.
            </summary>
            <param name="fileLocation">The file location that contains the XML contents. </param>
            <param name="rootElementName">
            The root element name, in contrast of the <see cref="M:OVSSerializer.OVSXmlSerializer`1.Serialize(System.IO.FileInfo,`0,System.String)"/>
            element name.
            </param>
            <returns> 
            The object, default or <see langword="null"/> if the xml file or stream is empty. 
            </returns>
        </member>
        <member name="M:OVSSerializer.OVSXmlSerializer`1.ShallowCopy(`0)">
            <summary>
            Uses <see cref="M:System.Object.MemberwiseClone"/> to create a new object,
            ignoring accessibility methods. Uses reflection instead of using the
            serializer.
            </summary>
        </member>
        <member name="T:OVSSerializer.IncludeTypes">
            <summary>
            The condition of how the <see cref="T:System.Xml.Serialization.XmlSerializer"/> should handle types
            of objects.
            </summary>
        </member>
        <member name="F:OVSSerializer.IncludeTypes.IgnoreTypes">
            <summary>
            It will ignore the derived type entirely.
            </summary>
        </member>
        <member name="F:OVSSerializer.IncludeTypes.SmartTypes">
            <summary>
            When the object is derived off the field, then it will write the
            object type.
            </summary>
        </member>
        <member name="F:OVSSerializer.IncludeTypes.AlwaysIncludeTypes">
            <summary>
            The XML file will always write the type of the object. 
            </summary>
        </member>
        <member name="T:OVSSerializer.ReadonlyFieldHandle">
            <summary>
            How it should handle readonly fields.
            </summary>
        </member>
        <member name="F:OVSSerializer.ReadonlyFieldHandle.Ignore">
            <summary>
            Ignores the readonly field entirely.
            </summary>
        </member>
        <member name="F:OVSSerializer.ReadonlyFieldHandle.Continue">
            <summary>
            Allows the parser to continue serializing the field.
            </summary>
        </member>
        <member name="F:OVSSerializer.ReadonlyFieldHandle.ThrowError">
            <summary>
            Throws an error if a readonly field is encountered.
            </summary>
        </member>
    </members>
</doc>
